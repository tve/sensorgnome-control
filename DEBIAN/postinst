#! /bin/bash -e
echo "Running sg-control postinst in $(pwd)"
SG=/opt/sensorgnome # would be nice to derive that from some env var...

# install acquisition.json and tag database if not there
SRC=$SG/templates
for f in acquisition.json SG_tag_database.sqlite; do
    [[ -f /etc/sensorgnome/$f ]] || cp $SRC/$f /etc/sensorgnome
done

# need to rebuild binary for authenticate-pam module for current architecture
#(cd $SG/control; id; TERM=dumb npm rebuild | cat)

# need to disable kernel RTLSDR driver
echo "blacklist dvb_usb_rtl28xxu" >/etc/modprobe.d/blacklist-rtl28xxu.conf

# tweak rsyslog config to log to sg-control.log -- the service file causes logging to
# facility local6, here we tell rsyslog to log that to /var/log/sg-control.log
if ! egrep -q sg-control /etc/rsyslog.conf; then
    sed -i -e '/log\/syslog/s/authpriv.none/authpriv.none,local6.none/' /etc/rsyslog.conf
    echo '' >>/etc/rsyslog.conf
    echo '# Sensorgnome sg-control' >>/etc/rsyslog.conf
    echo 'local6.* -/var/log/sg-control.log' >>/etc/rsyslog.conf
fi

# dir for motus uploader state
mkdir -p /var/lib/sensorgnome

# create log files so logrotate doesn't barf (odd...)
touch /var/log/sg-control.log /var/log/upgrade.log

# Upgrade from 2.0-rc4 to 2.0-rc5: folding deployment.txt into acquisition.json
# Caveat: we're ignoring any modified acquisition.json...
DEP=/etc/sensorgnome/deployment.json
ACQ=/etc/sensorgnome/acquisition.json
if [[ -f $DEP ]]; then
    echo "Migrating deployment.txt into acquisition.json"
    mv /opt/sensorgnome/templates/acquisition.json /etc/sensorgnome
    sl=$(jq .short_label $DEP)
    mo=$(jq .memo $DEP)
    sed -E -i -e "s/\"short_label\": \"[^\"]*\"/\"short_label\": $sl/" \
              -e "s/\"memo\": \"[^\"]*\"/\"memo\": $mo/" \
              $ACQ
    rm -f $DEP /etc/sensorgnome/acquisition.txt
fi

# Upgrade from 2.0-rc14 to 2.0-rc15: change rtl-sdr minsdr from 12dB to 6dB to match FCD
if [[ -f $ACQ ]]; then
    echo "Ensuring RTL-SDR minsnr is 6 and not 10"
    sed -E -i -e '/minsnr/,+1s/"value": 10/"value": 6/' $ACQ
fi

# enable and start/restart units
for U in sg-control; do
    # code from debhelper's postinst-systemd-enable template
    if [ "$1" = "configure" ] || [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-deconfigure" ] || [ "$1" = "abort-remove" ] ; then
        # This will only remove masks created by d-s-h on package removal.
        deb-systemd-helper unmask $U >/dev/null || true

        # was-enabled defaults to true, so new installations run enable.
        if deb-systemd-helper --quiet was-enabled $U; then
            # Enables the unit on first installation, creates new
            # symlinks on upgrades if the unit file has changed.
            deb-systemd-helper enable $U.service || true
        else
            # Update the statefile to add new symlinks (if any), which need to be
            # cleaned up on purge. Also remove old symlinks.
            deb-systemd-helper update-state $U >/dev/null || true
        fi
    fi

    # Restart service, if it is running
    systemctl daemon-reload
    echo "Skipping restart of sg-control" # so we don't pull the rug out mid-update
    # if systemctl is-active --quiet $U.service; then
    #     echo "Restarting $U.service"
    #     systemctl restart $U.service
    # fi
done
